# -*- coding: utf-8 -*-
"""Model_Class_From_the_Scratch.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Z1mxFQy7f0hPmcL5biOlghYw7t6gY4E
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class PyTorch_Custom_Model_Class(nn.Module):
    def __init__(self):
        super().__init__()
        pass
    
    def forward(self, x):
        return x

class MODEL_From_Scratch(nn.Module):
  def __init__(self,num_classes):
    super().__init__()
    # stride=2 지정하여 특징 맵의 크기 감소
    self.classifier=nn.Sequential(
        # 컨볼루션 연산 => 배치 정규화 => ReLU 활성 함수
        nn.Conv2d(3,32,kernel_size=3,stride=2,padding=1),
        nn.BatchNorm2d(32),
        nn.ReLU(),
        # 컨볼루션 연산 => 배치 정규화 => ReLU 활성 함수
        nn.Conv2d(32,64,kernel_size=3,stride=2,padding=1),
        nn.BatchNorm2d(64),
        nn.ReLU(),
        # 컨볼루션 연산 => 배치 정규화 => ReLU 활성 함수
        nn.Conv2d(64,128,kernel_size=3,stride=2,padding=1),
        nn.BatchNorm2d(128),
        nn.ReLU(),
        # 적응형 평균 풀링 연산
        nn.AdaptiveAvgPool2d(1),
        # FC 레이어 (평탄화 => 활성화 => 분류)
        nn.Flatten(),
        nn.Linear(128,64),
        nn.ReLU(),
        nn.Dropout(),
        nn.Linear(64,num_classes),
        nn.Softmax(dim=-1)
    )
    pass


  def forward(self,x): # 학습하거나 검증할 때 계산하는 경로 정의
    return self.classifier(x)